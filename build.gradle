plugins {
    id 'dev.architectury.loom' version '1.11-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id "com.modrinth.minotaur" version "2.+" apply false
}

static String removePrefix(String base, String prefix) {
    if (base == null) return ''
    if (prefix == null || !base.startsWith(prefix)) return base
    return base.substring(prefix.length())
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        // Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
        archivesName = "${rootProject.archives_name}-${project.name}"
    }

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
        maven {
            url = 'https://maven.parchmentmc.org'
        }
    }

    loom {
        //splitMinecraftJar()
        runtimeOnlyLog4j = true

        mixin {
            //defaultRefmapName = "${rootProject.name}-${project.name}.refmap.json"
        }
    }

    dependencies {
        minecraft "net.minecraft:minecraft:${rootProject.minecraft_version}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${rootProject.parchment_version}@zip")
        }
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()
        toolchain.languageVersion = JavaLanguageVersion.of(21)
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }

    // Configure Maven publishing.
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }

    if (project.name in ['fabric', 'neoforge']) {
        apply plugin: 'com.modrinth.minotaur'
        def modLoaders = project.mr_loader.toString().split(",") as List
        modrinth {
            token.set System.getenv("MR_TOKEN")
            projectId.set rootProject.mr_project_id
            versionNumber.set "${project.version}+${project.minecraft_version}-${modLoaders[0]}"
            versionName.set String.format(
                    /*format=*/ rootProject.mr_version_name_format.toString(),
                    rootProject.mr_version_game_range,
                    project.mr_loader_display,
                    rootProject.mr_version_mod_abbr,
                    project.version
            )
            changelog.set removePrefix(System.getenv("MR_CHANGELOG"), '[ci publish]').trim()
            versionType.set rootProject.mr_version_type
            gameVersions = rootProject.mr_version_game.toString().split(",") as List
            loaders.set modLoaders
            detectLoaders.set false
            autoAddDependsOn.set false

            dependencies {
                required.project 'architectury-api'
                if (project.name == 'fabric') required.project 'fabric-api'

                // Recommended for Duration localization
                optional.project 'enchlevel-langpatch'
            }

            uploadFile.set tasks.remapJar
            additionalFiles = [tasks.remapSourcesJar]

            debugMode = System.getenv("MR_DEBUG_MODE") == '1'
        }
    }
}
